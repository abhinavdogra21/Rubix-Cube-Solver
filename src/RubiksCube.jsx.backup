import React, { useRef, useEffect, useCallback, forwardRef, useImperativeHandle } from 'react';
import * as THREE from 'three';
import { CubeState } from './cubeState';

const RubiksCube = forwardRef(({ cubeState }, ref) => {
  const mountRef = useRef(null);
  const sceneRef = useRef(null);
  const rendererRef = useRef(null);
  const cameraRef = useRef(null);
  const cubeGroupRef = useRef(new THREE.Group());
  const cubesRef = useRef([]);
  const animationIdRef = useRef(null);
  const currentStateRef = useRef(null);

  // Color mapping for cube faces
  const faceColors = {
    'W': 0xFFFFFF, // White
    'R': 0xFF0000, // Red
    'G': 0x00FF00, // Green
    'Y': 0xFFFF00, // Yellow
    'O': 0xFFA500, // Orange
    'B': 0x0000FF  // Blue
  };

  const createCubelet = useCallback((x, y, z) => {
    const geometry = new THREE.BoxGeometry(0.95, 0.95, 0.95);
    
    // Create materials for each face
    const materials = [
      new THREE.MeshLambertMaterial({ color: 0x333333 }), // Right
      new THREE.MeshLambertMaterial({ color: 0x333333 }), // Left
      new THREE.MeshLambertMaterial({ color: 0x333333 }), // Top
      new THREE.MeshLambertMaterial({ color: 0x333333 }), // Bottom
      new THREE.MeshLambertMaterial({ color: 0x333333 }), // Front
      new THREE.MeshLambertMaterial({ color: 0x333333 })  // Back
    ];

    const cube = new THREE.Mesh(geometry, materials);
    cube.position.set(x, y, z);
    cube.visible = true;
    cube.castShadow = true;
    cube.receiveShadow = true;
    
    // Add black edges
    const edges = new THREE.EdgesGeometry(geometry);
    const edgeMaterial = new THREE.LineBasicMaterial({ color: 0x000000, linewidth: 3 });
    const wireframe = new THREE.LineSegments(edges, edgeMaterial);
    wireframe.visible = true;
    cube.add(wireframe);
    
    console.log(`Created cubelet at position (${x}, ${y}, ${z})`);
    return cube;
  }, []);

  const updateCubeColors = useCallback((cubeStateObj) => {
    if (!cubeStateObj || !cubeStateObj.faces) {
      console.warn('Invalid cube state provided to updateCubeColors');
      return;
    }

    console.log('Updating cube colors with state:', cubeStateObj.faces);
    const faces = cubeStateObj.faces;
    currentStateRef.current = cubeStateObj;

    // Ensure cube group is visible
    if (cubeGroupRef.current) {
      cubeGroupRef.current.visible = true;
    }

    cubesRef.current.forEach((cube, index) => {
      const pos = cube.position;
      const materials = cube.material;
      
      // Ensure cube is visible
      cube.visible = true;
      
      // Reset all faces to dark gray first
      materials.forEach(mat => {
        mat.color.setHex(0x333333);
        mat.needsUpdate = true;
      });
      
      // Right face (x = 1)
      if (pos.x === 1) {
        const row = 1 - pos.y; // Convert from -1,0,1 to 2,1,0
        const col = 1 + pos.z; // Convert from -1,0,1 to 0,1,2
        const index = row * 3 + col;
        if (faces.right[index]) {
          materials[0].color.setHex(faceColors[faces.right[index]] || 0x333333);
          materials[0].needsUpdate = true;
        }
      }
      
      // Left face (x = -1)
      if (pos.x === -1) {
        const row = 1 - pos.y;
        const col = 1 - pos.z;
        const index = row * 3 + col;
        if (faces.left[index]) {
          materials[1].color.setHex(faceColors[faces.left[index]] || 0x333333);
          materials[1].needsUpdate = true;
        }
      }
      
      // Top face (y = 1)
      if (pos.y === 1) {
        const row = 1 - pos.z;
        const col = 1 + pos.x;
        const index = row * 3 + col;
        if (faces.top[index]) {
          materials[2].color.setHex(faceColors[faces.top[index]] || 0x333333);
          materials[2].needsUpdate = true;
        }
      }
      
      // Bottom face (y = -1)
      if (pos.y === -1) {
        const row = 1 + pos.z;
        const col = 1 + pos.x;
        const index = row * 3 + col;
        if (faces.bottom[index]) {
          materials[3].color.setHex(faceColors[faces.bottom[index]] || 0x333333);
          materials[3].needsUpdate = true;
        }
      }
      
      // Front face (z = 1)
      if (pos.z === 1) {
        const row = 1 - pos.y;
        const col = 1 + pos.x;
        const index = row * 3 + col;
        if (faces.front[index]) {
          materials[4].color.setHex(faceColors[faces.front[index]] || 0x333333);
          materials[4].needsUpdate = true;
        }
      }
      
      // Back face (z = -1)
      if (pos.z === -1) {
        const row = 1 - pos.y;
        const col = 1 - pos.x;
        const index = row * 3 + col;
        if (faces.back[index]) {
          materials[5].color.setHex(faceColors[faces.back[index]] || 0x333333);
          materials[5].needsUpdate = true;
        }
      }
    });
    
    console.log('Cube colors updated');
  }, []);

  const animateScramble = useCallback((scramble) => {
    if (!scramble || !currentStateRef.current) return;
    
    console.log("Starting scramble animation:", scramble);
    
    const moves = scramble.split(" ").filter(move => move.trim());
    let moveIndex = 0;
    
    const animateNextMove = () => {
      if (moveIndex >= moves.length) {
        console.log("Scramble animation complete");
        updateCubeColors(currentStateRef.current);
        return;
      }
      
      const move = moves[moveIndex];
      console.log(`Animating scramble move ${moveIndex + 1}/${moves.length}: ${move}`);
      
      if (currentStateRef.current) {
        currentStateRef.current.applyMove(move);
        updateCubeColors(currentStateRef.current);
      }
      
      const rotationAxis = getRotationAxis(move);
      const rotationAmount = getRotationAmount(move);
      
      animateRotation(rotationAxis, rotationAmount, () => {
        moveIndex++;
        setTimeout(animateNextMove, 200);
      });
    };
    
    animateNextMove();
  }, [updateCubeColors]);

  const animateSolution = useCallback((solution) => {
    if (!solution || !currentStateRef.current) return;
    
    console.log('Starting solution animation:', solution);
    const moves = solution.split(' ').filter(move => move.trim());
    let moveIndex = 0;
    
    const animateNextMove = () => {
      if (moveIndex >= moves.length) {
        // Reset to solved state
        console.log('Solution animation complete');
        const solvedState = new CubeState();
        currentStateRef.current = solvedState;
        updateCubeColors(solvedState);
        return;
      }
      
      const move = moves[moveIndex];
      console.log(`Animating solution move ${moveIndex + 1}/${moves.length}: ${move}`);
      
      // Apply the move to the current state
      if (currentStateRef.current) {
        currentStateRef.current.applyMove(move);
        updateCubeColors(currentStateRef.current);
      }
      
      // Add visual rotation effect
      const rotationAxis = getRotationAxis(move);
      const rotationAmount = getRotationAmount(move);
      
      // Ensure cube group is visible before animation
      cubeGroupRef.current.visible = true;

      animateRotation(rotationAxis, rotationAmount, () => {
        moveIndex++;
        setTimeout(animateNextMove, 300);
      });
    };
    
    animateNextMove();
  }, [updateCubeColors]);

  const getRotationAxis = (move) => {
    const face = move.charAt(0);
    switch (face) {
      case 'R': return new THREE.Vector3(1, 0, 0);
      case 'L': return new THREE.Vector3(-1, 0, 0);
      case 'U': return new THREE.Vector3(0, 1, 0);
      case 'D': return new THREE.Vector3(0, -1, 0);
      case 'F': return new THREE.Vector3(0, 0, 1);
      case 'B': return new THREE.Vector3(0, 0, -1);
      default: return new THREE.Vector3(0, 1, 0);
    }  const animateRotation = (axis, amount, callback) => {
    const startRotation = { ...cubeGroupRef.current.rotation };
    const targetRotation = {
      x: startRotation.x + (axis.x * amount * 0.1),
      y: startRotation.y + (axis.y * amount * 0.1),
      z: startRotation.z + (axis.z * amount * 0.1)
    };
    
    const duration = 200;
    const startTime = Date.now();
    
    const animate = () => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);
      const eased = 1 - Math.pow(1 - progress, 3); // Ease out cubic
      
      cubeGroupRef.current.rotation.x = startRotation.x + (targetRotation.x - startRotation.x) * eased;
      cubeGroupRef.current.rotation.y = startRotation.y + (targetRotation.y - startRotation.y) * eased;
      cubeGroupRef.current.rotation.z = startRotation.z + (targetRotation.z - startRotation.z) * eased;
      
      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        cubeGroupRef.current.rotation.x = startRotation.x;
        cubeGroupRef.current.rotation.y = startRotation.y;
        cubeGroupRef.current.rotation.z = startRotation.z;
        
        if (callback) callback();
      }
    };
    
    animate();
  };

  // Three.js setup
  useEffect(() => {
    if (!mountRef.current) return;

    // Scene setup
    const scene = new THREE.Scene();
    sceneRef.current = scene;

    // Camera setup
    const camera = new THREE.PerspectiveCamera(
      75,
      mountRef.current.clientWidth / mountRef.current.clientHeight,
      0.1,
      1000
    );
    camera.position.set(5, 5, 5);
    camera.lookAt(0, 0, 0);
    cameraRef.current = camera;

    // Renderer setup
    const renderer = new THREE.WebGLRenderer({ 
      antialias: true, 
      alpha: true // Enable transparency
    });
    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    renderer.setClearColor(0x000000, 0); // Transparent background
    mountRef.current.appendChild(renderer.domElement);
    rendererRef.current = renderer;

    // Lighting
    const ambientLight = new THREE.AmbientLight(0x404040, 1.0);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 1.2);
    directionalLight.position.set(10, 10, 5);
    directionalLight.castShadow = true;
    directionalLight.shadow.mapSize.width = 2048;
    directionalLight.shadow.mapSize.height = 2048;
    scene.add(directionalLight);

    // Add point lights for better illumination
    const pointLight1 = new THREE.PointLight(0x00f5ff, 0.5, 100);
    pointLight1.position.set(5, 5, 5);
    scene.add(pointLight1);

    const pointLight2 = new THREE.PointLight(0xff00ff, 0.3, 100);
    pointLight2.position.set(-5, -5, -5);
    scene.add(pointLight2);

    // Create 3x3x3 cube (27 cubelets, but we only show the visible ones)
    cubesRef.current = [];
    console.log('Creating cube pieces...');
    for (let x = -1; x <= 1; x++) {
      for (let y = -1; y <= 1; y++) {
        for (let z = -1; z <= 1; z++) {
          // Skip the center cubelet (not visible)
          if (x === 0 && y === 0 && z === 0) continue;
          
          const cubelet = createCubelet(x, y, z);
          cubelet.visible = true; // Ensure visibility
          cubeGroupRef.current.add(cubelet);
          cubesRef.current.push(cubelet);
        }
      }
    }
    console.log(`Created ${cubesRef.current.length} cube pieces`);

    scene.add(cubeGroupRef.current);
    
    // Ensure cube group is visible
    cubeGroupRef.current.visible = true;

    // Mouse controls for rotation
    let isMouseDown = false;
    let mouseX = 0;
    let mouseY = 0;

    const handleMouseDown = (event) => {
      isMouseDown = true;
      mouseX = event.clientX;
      mouseY = event.clientY;
    };

    const handleMouseMove = (event) => {
      if (!isMouseDown) return;

      const deltaX = event.clientX - mouseX;
      const deltaY = event.clientY - mouseY;

      cubeGroupRef.current.rotation.y += deltaX * 0.01;
      cubeGroupRef.current.rotation.x += deltaY * 0.01;

      mouseX = event.clientX;
      mouseY = event.clientY;
    };

    const handleMouseUp = () => {
      isMouseDown = false;
    };

    // Touch controls for mobile
    const handleTouchStart = (event) => {
      if (event.touches.length === 1) {
        isMouseDown = true;
        mouseX = event.touches[0].clientX;
        mouseY = event.touches[0].clientY;
      }
    };

    const handleTouchMove = (event) => {
      if (!isMouseDown || event.touches.length !== 1) return;
      
      event.preventDefault();
      const deltaX = event.touches[0].clientX - mouseX;
      const deltaY = event.touches[0].clientY - mouseY;

      cubeGroupRef.current.rotation.y += deltaX * 0.01;
      cubeGroupRef.current.rotation.x += deltaY * 0.01;

      mouseX = event.touches[0].clientX;
      mouseY = event.touches[0].clientY;
    };

    const handleTouchEnd = () => {
      isMouseDown = false;
    };

    renderer.domElement.addEventListener('mousedown', handleMouseDown);
    renderer.domElement.addEventListener('mousemove', handleMouseMove);
    renderer.domElement.addEventListener('mouseup', handleMouseUp);
    renderer.domElement.addEventListener('touchstart', handleTouchStart);
    renderer.domElement.addEventListener('touchmove', handleTouchMove);
    renderer.domElement.addEventListener('touchend', handleTouchEnd);

    // Animation loop
    const animate = () => {
      animationIdRef.current = requestAnimationFrame(animate);
      
      // Slow auto-rotation when not being manually controlled
      if (!isMouseDown) {
        cubeGroupRef.current.rotation.y += 0.003;
      }
      
      renderer.render(scene, camera);
    };
    animate();

    // Handle window resize
    const handleResize = () => {
      if (!mountRef.current) return;
      
      const width = mountRef.current.clientWidth;
      const height = mountRef.current.clientHeight;
      
      camera.aspect = width / height;
      camera.updateProjectionMatrix();
      renderer.setSize(width, height);
    };
    
    window.addEventListener('resize', handleResize);

    // Cleanup
    return () => {
      window.removeEventListener('resize', handleResize);
      renderer.domElement.removeEventListener('mousedown', handleMouseDown);
      renderer.domElement.removeEventListener('mousemove', handleMouseMove);
      renderer.domElement.removeEventListener('mouseup', handleMouseUp);
      renderer.domElement.removeEventListener('touchstart', handleTouchStart);
      renderer.domElement.removeEventListener('touchmove', handleTouchMove);
      renderer.domElement.removeEventListener('touchend', handleTouchEnd);
      
      if (animationIdRef.current) {
        cancelAnimationFrame(animationIdRef.current);
      }
      
      if (mountRef.current && renderer.domElement) {
        mountRef.current.removeChild(renderer.domElement);
      }
      
      renderer.dispose();
    };
  }, [createCubelet]);

  // Update colors when cubeState changes
  useEffect(() => {
    if (cubeState) {
      currentStateRef.current = cubeState;
      updateCubeColors(cubeState);
    }
  }, [cubeState, updateCubeColors]);

  // Expose methods to parent component
  useImperativeHandle(ref, () => ({
    updateCubeState: (newState) => {
      currentStateRef.current = newState;
      updateCubeColors(newState);
    },
    animateScramble: (scramble) => {
      animateScramble(scramble);
    },
    animateSolution: (solution) => {
      animateSolution(solution);
    }
  }));

  return (
    <div 
      ref={mountRef} 
      style={{ 
        width: '100%', 
        height: '100%',
        minHeight: '600px',
        borderRadius: '16px',
        overflow: 'hidden',
        cursor: 'grab'
      }} 
    />
  );
});

RubiksCube.displayName = 'RubiksCube';

export default RubiksCube;

